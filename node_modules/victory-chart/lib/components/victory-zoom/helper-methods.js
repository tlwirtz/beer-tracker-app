Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[typeof Symbol==="function"?Symbol.iterator:"@@iterator"](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if((typeof Symbol==="function"?Symbol.iterator:"@@iterator")in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();exports.default={







scale:function scale(currentDomain,originalDomain,factor){var _originalDomain=_slicedToArray(
originalDomain,2),fromBound=_originalDomain[0],toBound=_originalDomain[1];var _currentDomain=_slicedToArray(
currentDomain,2),from=_currentDomain[0],to=_currentDomain[1];
var range=Math.abs(from-to);
var midpoint=from+range/2;
var newRange=range*factor/2;
return[
Math.max(midpoint-newRange,fromBound),
Math.min(midpoint+newRange,toBound)];

},








pan:function pan(currentDomain,originalDomain,delta){var _currentDomain2=_slicedToArray(
currentDomain,2),fromCurrent=_currentDomain2[0],toCurrent=_currentDomain2[1];var _originalDomain2=_slicedToArray(
originalDomain,2),fromOriginal=_originalDomain2[0],toOriginal=_originalDomain2[1];
var lowerBound=fromCurrent+delta;
var upperBound=toCurrent+delta;

if(lowerBound>fromOriginal&&upperBound<toOriginal){
return[lowerBound,upperBound];
}else if(lowerBound<fromOriginal){
var dx=toCurrent-fromCurrent;
return[fromOriginal,fromOriginal+dx];
}else if(upperBound>toOriginal){
var _dx=toCurrent-fromCurrent;
return[toOriginal-_dx,toOriginal];
}else{
return currentDomain;
}
}};